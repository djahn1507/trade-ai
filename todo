❓Sollen wir gleich auch eine rudimentäre „Portfolio-Simulation“ einbauen?
(z. B. 10.000 € Startkapital, je Signal wird gekauft/verkauft, inkl. Performance-Graph)

Oder möchtest du zuerst den logischen Teil (Accuracy, Winrate) abschließen?

Modellkomplexität erhöhen 





dynamisch

| Komponente                | Dynamisch per Parameter         | Beispiel                          |
| ------------------------- | ------------------------------- | --------------------------------- |
| 📅 Zeitfenster            | `train_start`, `test_start`     | `"2015-01-01"` bis `"2024-12-31"` |
| 📈 Aktien/ETF-Auswahl     | `ticker`                        | `"AAPL"`, `"SPY"`, `"TSLA"`       |
| 🔁 Sequenzlänge (LSTM)    | `sequence_length`               | `30`, `60`, `90` Tage             |
| 🧠 Modell-Typ             | `model_type = "lstm"`           | später auch `"transformer"`       |
| 🎯 Klassifikation / Regr. | `target_type = "class"`         | `"class"` oder `"regression"`     |
| 📊 Backtest-Schwelle      | `buy_threshold = 0.6`           | Trade ab Prediction > 0.6         |
| 💾 Modellpfad             | `model_path = "models/lstm.h5"` | individuell pro Training          |
| 💡 Metrik-Auswahl         | `metrics = ["accuracy", "f1"]`  | später für Dashboard / Logging    |

Verbesserungspotenzial - Stichpunkte

Signalqualität verbessern:

Niedriger Recall-Wert (0.1843) deutet auf viele verpasste profitable Gelegenheiten hin
Geringe Präzision (0.4444) zeigt, dass weniger als die Hälfte der Kaufsignale gewinnbringend sind


Trade-Frequenz optimieren:

Nur 90 Kaufsignale generiert, davon 40 ausgeführt - könnte zu wenig sein für optimale Rendite
Die Strategie nutzt den Markt unzureichend aus (starke Unterperformance vs. Buy & Hold)


Risikomanagement verstärken:

Max Drawdown von 27.41% ist relativ hoch
Verbesserung des Gewinn/Verlust-Verhältnisses (aktuell nur 1.13)


Signalerkennung präzisieren:

Vorhersageverteilung ist zu breit gestreut (0.066 bis 0.809)
Besser definierte Signalschwellen implementieren


Position Sizing anpassen:

Kapitalallokation pro Trade optimieren
Risikobasiertes Position Sizing einführen


Stop-Loss und Take-Profit-Mechanismen:

Automatische Verlustbegrenzung implementieren
Gewinnmitnahmepunkte definieren


Marktphasen-Anpassung:

Filterung nach Marktphasen (Trend, Seitwärts, Volatil)
Anpassung der Strategie an unterschiedliche Marktbedingungen


Zeitrahmen-Optimierung:

Analyse verschiedener Zeiträume (kurzfristig, mittelfristig, langfristig)
Kombination mehrerer Zeitrahmen für robustere Signale


Feature Engineering:

Neue Indikatoren oder Signale einführen
Bestehende Indikatoren optimieren oder kombinieren


Machine Learning verfeinern:

Modellarchitektur überprüfen und anpassen
Hyperparameter-Optimierung durchführen
Ensemble-Methoden implementieren